//
// Generated by JTB 1.3.2 DIT@UoA patched
//

options {
   JAVA_UNICODE_ESCAPE = true;
   STATIC = false;
}

PARSER_BEGIN(QueryParser)
package generated;

import syntaxtree.*;
import java.util.Vector;


public class QueryParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(QueryParser)

JAVACODE
void error_skipto(int kind)
{
   ParseException e = generateParseException();
   System.out.println(e.getMessage());
   Token t;
   do
   {
      t = getNextToken();
      System.out.println(t.toString());
   }
   while ( t.kind != kind );
}

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "%" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
}

TOKEN :
{
   <SEL: "sel">
   | <PROJ: "proj">
   | <JOIN: "join">
   | <GRB: "groupby">
   | <HAVING: "having">
   | <INTER: "inter">
   | <UNION: "union">
   | <DIFF: "diff">
   | <SUM: "sum">
   | <MAX: "max">
   | <MIN: "min">
   | <AVG: "avg">
   | <COUNT: "count">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LSQPAREN: "[">
   | <RSQPAREN: "]">
   | <LT: "<">
   | <GT: ">">
   | <LTE: "<=">
   | <GTE: ">=">
   | <EQUAL: "==">
   | <ASSIGN: "=">
   | <NEQUAL: "!=">
   | <CONCATENATION: "++">
   | <PLUS: "+">
   | <MINUS: "-">
   | <MUL: "*">
   | <FLDIV: "/">
   | <DIV: "div">
   | <MOD: "mod">
   | <NOT: "not">
   | <AND: "and">
   | <OR: "or">
}

TOKEN :
{
   <ALPHA_NUM_IDENT: (["A"-"Z", "a"-"z"] (["A"-"Z", "a"-"z", "0"-"9", "_"])*)>
   | <INTEGER_LITERAL: ((["0"-"9"])+ | "0" "x" (["0"-"9", "A"-"F", "a"-"f"])+ | "0" "o" (["0"-"7"])+)>
   | <FLOATING_POINT_LITERAL: ((["0"-"9"])+ "." (["0"-"9"])+ | (["0"-"9"])+ "." (["0"-"9"])+ ["E", "e"] (["-", "+"])? (["0"-"9"])+ | (["0"-"9"])+ ["E", "e"] (["-", "+"])? (["0"-"9"])+)>
   | <STRING_LITERAL: ("\"" (~["\"", "\n"])* "\"")>
}

Query Query() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   Operators n2;
   NodeListOptional n3;
   Operators n4;

   
}
{
   (
      { n3 = new NodeListOptional(); }
      { n1 = new NodeSequence(2); }
      n2=Operators()
      { n1.addNode(n2); }
      (
         LOOKAHEAD(2)
         n4=Operators()
         { n3.addNode(n4); }
      )*
      { n3.nodes.trimToSize(); }
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )?
   
   { return new Query(n0); }
}

Operators Operators() :
{
   NodeChoice n0;
   SelectionOp n1;
   ProjectionOp n2;
   JoinOp n3;
   GroupingOp n4;
   SetOps n5;
   ParOp n6;

   
}
{
   (
      n1=SelectionOp()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ProjectionOp()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=JoinOp()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=GroupingOp()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=SetOps()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(2)
      n6=ParOp()
      { n0 = new NodeChoice(n6, 5); }
   )
   
   { return new Operators(n0); }
}

SelectionOp SelectionOp() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Condition n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   Relation n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1="sel" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Condition()
   n6="]" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="(" { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=Relation()
   n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new SelectionOp(n0,n2,n4,n5,n7,n9,n10); }
}

ProjectionOp ProjectionOp() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Attribute n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Attribute n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   Relation n14;
   NodeToken n15;
   Token n16;

   
}
{
   n1="proj" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Attribute()
   (
      LOOKAHEAD(2)
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=Attribute()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n11="]" { n10 = JTBToolkit.makeNodeToken(n11); }
   n13="(" { n12 = JTBToolkit.makeNodeToken(n13); }
   n14=Relation()
   n16=")" { n15 = JTBToolkit.makeNodeToken(n16); }
   
   { return new ProjectionOp(n0,n2,n4,n5,n10,n12,n14,n15); }
}

JoinOp JoinOp() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Condition n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   Relation n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   Relation n14;
   NodeToken n15;
   Token n16;

   
}
{
   n1="join" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Condition()
   n6="]" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="(" { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=Relation()
   n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
   n13="(" { n12 = JTBToolkit.makeNodeToken(n13); }
   n14=Relation()
   n16=")" { n15 = JTBToolkit.makeNodeToken(n16); }
   
   { return new JoinOp(n0,n2,n4,n5,n7,n9,n10,n12,n14,n15); }
}

GroupingOp GroupingOp() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Attribute n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Attribute n9;
   NodeToken n10;
   Token n11;
   UDF n12;
   NodeOptional n13 = new NodeOptional();
   HavingClause n14;

   
}
{
   n1="groupby" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Attribute()
   (
      LOOKAHEAD(2)
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=Attribute()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n11="]" { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=UDF()
   (
      n14=HavingClause()
      { n13.addNode(n14); }
   )?
   
   { return new GroupingOp(n0,n2,n4,n5,n10,n12,n13); }
}

HavingClause HavingClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Condition n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   Relation n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1="having" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Condition()
   n6="]" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="(" { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=Relation()
   n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new HavingClause(n0,n2,n4,n5,n7,n9,n10); }
}

SetOps SetOps() :
{
   Ops n0;
   NodeToken n1;
   Token n2;
   Relation n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Relation n8;
   NodeToken n9;
   Token n10;

   
}
{
   n0=Ops()
   n2="(" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Relation()
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Relation()
   n10=")" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new SetOps(n0,n1,n3,n4,n6,n8,n9); }
}

ParOp ParOp() :
{
   NodeToken n0;
   Token n1;
   Operators n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Operators()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ParOp(n0,n2,n3); }
}

Ops Ops() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2="inter" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="union" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="diff" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new Ops(n0); }
}

Relation Relation() :
{
   NodeChoice n0;
   AlphaNumIdent n1;
   Operators n2;

   
}
{
   (
      n1=AlphaNumIdent()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Operators()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Relation(n0); }
}

Attribute Attribute() :
{
   AlphaNumIdent n0;

   
}
{
   n0=AlphaNumIdent()
   
   { return new Attribute(n0); }
}

UDF UDF() :
{
   SimpleAggregations n0;

   
}
{
   n0=SimpleAggregations()
   
   { return new UDF(n0); }
}

SimpleAggregations SimpleAggregations() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n2="min" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="max" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="sum" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="avg" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="count" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   )
   
   { return new SimpleAggregations(n0); }
}

Condition Condition() :
{
   Atom n0;
   NodeOptional n1 = new NodeOptional();
   ComplexCondition n2;

   
}
{
   n0=Atom()
   (
      n2=ComplexCondition()
      { n1.addNode(n2); }
   )?
   
   { return new Condition(n0,n1); }
}

ComplexCondition ComplexCondition() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   Atom n5;

   
}
{
   (
      (
         n2="or" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4="and" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n5=Atom()
   
   { return new ComplexCondition(n0,n5); }
}

Atom Atom() :
{
   AtomPart n0;
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   AtomPart n12;

   
}
{
   n0=AtomPart()
   (
      (
         n3="=" { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=">" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      |
         n7="<" { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1 = new NodeChoice(n6, 2); }
      |
         n9="<=" { n8 = JTBToolkit.makeNodeToken(n9); }
         { n1 = new NodeChoice(n8, 3); }
      |
         n11=">=" { n10 = JTBToolkit.makeNodeToken(n11); }
         { n1 = new NodeChoice(n10, 4); }
      )
      
   )
   n12=AtomPart()
   
   { return new Atom(n0,n1,n12); }
}

AtomPart AtomPart() :
{
   NodeChoice n0;
   AtomAttr n1;
   IntegerLiteral n2;
   FloatLiteral n3;
   StringLiteral n4;
   NodeOptional n5 = new NodeOptional();
   ComplexAtomPart n6;

   
}
{
   (
      (
         n1=AtomAttr()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=IntegerLiteral()
         { n0 = new NodeChoice(n2, 1); }
      |
         n3=FloatLiteral()
         { n0 = new NodeChoice(n3, 2); }
      |
         n4=StringLiteral()
         { n0 = new NodeChoice(n4, 3); }
      )
      
   )
   (
      n6=ComplexAtomPart()
      { n5.addNode(n6); }
   )?
   
   { return new AtomPart(n0,n5); }
}

ComplexAtomPart ComplexAtomPart() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   IntegerLiteral n6;
   FloatLiteral n7;

   
}
{
   (
      (
         n2="+" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4="-" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      (
         n6=IntegerLiteral()
         { n5 = new NodeChoice(n6, 0); }
      |
         n7=FloatLiteral()
         { n5 = new NodeChoice(n7, 1); }
      )
      
   )
   
   { return new ComplexAtomPart(n0,n5); }
}

AtomAttr AtomAttr() :
{
   AlphaNumIdent n0;
   NodeOptional n1 = new NodeOptional();
   AtRel n2;

   
}
{
   n0=AlphaNumIdent()
   (
      n2=AtRel()
      { n1.addNode(n2); }
   )?
   
   { return new AtomAttr(n0,n1); }
}

AtRel AtRel() :
{
   NodeToken n0;
   Token n1;
   AlphaNumIdent n2;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AlphaNumIdent()
   
   { return new AtRel(n0,n2); }
}

AlphaNumIdent AlphaNumIdent() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<ALPHA_NUM_IDENT> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new AlphaNumIdent(n0); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

FloatLiteral FloatLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<FLOATING_POINT_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FloatLiteral(n0); }
}

StringLiteral StringLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<STRING_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new StringLiteral(n0); }
}
