/* Generated By:JavaCC: Do not edit this line. QueryParserConstants.java */
package generated;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface QueryParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int SEL = 7;
  /** RegularExpression Id. */
  int PROJ = 8;
  /** RegularExpression Id. */
  int JOIN = 9;
  /** RegularExpression Id. */
  int GRB = 10;
  /** RegularExpression Id. */
  int HAVING = 11;
  /** RegularExpression Id. */
  int INTER = 12;
  /** RegularExpression Id. */
  int UNION = 13;
  /** RegularExpression Id. */
  int DIFF = 14;
  /** RegularExpression Id. */
  int SUM = 15;
  /** RegularExpression Id. */
  int MAX = 16;
  /** RegularExpression Id. */
  int MIN = 17;
  /** RegularExpression Id. */
  int AVG = 18;
  /** RegularExpression Id. */
  int COUNT = 19;
  /** RegularExpression Id. */
  int LPAREN = 20;
  /** RegularExpression Id. */
  int RPAREN = 21;
  /** RegularExpression Id. */
  int LSQPAREN = 22;
  /** RegularExpression Id. */
  int RSQPAREN = 23;
  /** RegularExpression Id. */
  int LT = 24;
  /** RegularExpression Id. */
  int GT = 25;
  /** RegularExpression Id. */
  int LTE = 26;
  /** RegularExpression Id. */
  int GTE = 27;
  /** RegularExpression Id. */
  int EQUAL = 28;
  /** RegularExpression Id. */
  int ASSIGN = 29;
  /** RegularExpression Id. */
  int NEQUAL = 30;
  /** RegularExpression Id. */
  int CONCATENATION = 31;
  /** RegularExpression Id. */
  int PLUS = 32;
  /** RegularExpression Id. */
  int MINUS = 33;
  /** RegularExpression Id. */
  int MUL = 34;
  /** RegularExpression Id. */
  int FLDIV = 35;
  /** RegularExpression Id. */
  int DIV = 36;
  /** RegularExpression Id. */
  int MOD = 37;
  /** RegularExpression Id. */
  int NOT = 38;
  /** RegularExpression Id. */
  int AND = 39;
  /** RegularExpression Id. */
  int OR = 40;
  /** RegularExpression Id. */
  int ALPHA_NUM_IDENT = 41;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 42;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 43;
  /** RegularExpression Id. */
  int STRING_LITERAL = 44;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "\"sel\"",
    "\"proj\"",
    "\"join\"",
    "\"groupby\"",
    "\"having\"",
    "\"inter\"",
    "\"union\"",
    "\"diff\"",
    "\"sum\"",
    "\"max\"",
    "\"min\"",
    "\"avg\"",
    "\"count\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"=\"",
    "\"!=\"",
    "\"++\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"div\"",
    "\"mod\"",
    "\"not\"",
    "\"and\"",
    "\"or\"",
    "<ALPHA_NUM_IDENT>",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<STRING_LITERAL>",
    "\",\"",
  };

}
