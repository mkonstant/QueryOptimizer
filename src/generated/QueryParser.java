/* Generated By:JavaCC: Do not edit this line. QueryParser.java */
package generated;

import syntaxtree.*;
import java.util.Vector;


public class QueryParser implements QueryParserConstants {

  void error_skipto(int kind) throws ParseException {
   ParseException e = generateParseException();
   System.out.println(e.getMessage());
   Token t;
   do
   {
      t = getNextToken();
      System.out.println(t.toString());
   }
   while ( t.kind != kind );
  }

  final public Query Query() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   Operators n2;
   NodeListOptional n3;
   Operators n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEL:
    case PROJ:
    case JOIN:
    case GRB:
    case INTER:
    case UNION:
    case DIFF:
    case LPAREN:
        n3 = new NodeListOptional();
        n1 = new NodeSequence(2);
      n2 = Operators();
        n1.addNode(n2);
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
        n4 = Operators();
           n3.addNode(n4);
      }
        n3.nodes.trimToSize();
        n1.addNode(n3);
        n0.addNode(n1);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
     {if (true) return new Query(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Operators Operators() throws ParseException {
   NodeChoice n0;
   SelectionOp n1;
   ProjectionOp n2;
   JoinOp n3;
   GroupingOp n4;
   SetOps n5;
   ParOp n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEL:
      n1 = SelectionOp();
        n0 = new NodeChoice(n1, 0);
      break;
    case PROJ:
      n2 = ProjectionOp();
        n0 = new NodeChoice(n2, 1);
      break;
    case JOIN:
      n3 = JoinOp();
        n0 = new NodeChoice(n3, 2);
      break;
    case GRB:
      n4 = GroupingOp();
        n0 = new NodeChoice(n4, 3);
      break;
    case INTER:
    case UNION:
    case DIFF:
      n5 = SetOps();
        n0 = new NodeChoice(n5, 4);
      break;
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_2(2)) {
        n6 = ParOp();
        n0 = new NodeChoice(n6, 5);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Operators(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SelectionOp SelectionOp() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Condition n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   Relation n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(SEL);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LSQPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Condition();
    n6 = jj_consume_token(RSQPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(LPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
    n9 = Relation();
    n11 = jj_consume_token(RPAREN);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new SelectionOp(n0,n2,n4,n5,n7,n9,n10);}
    throw new Error("Missing return statement in function");
  }

  final public ProjectionOp ProjectionOp() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Attribute n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Attribute n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   Relation n14;
   NodeToken n15;
   Token n16;
    n1 = jj_consume_token(PROJ);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LSQPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Attribute();
    label_2:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_2;
      }
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(45);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = Attribute();
        n6.addNode(n9);
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    n11 = jj_consume_token(RSQPAREN);
             n10 = JTBToolkit.makeNodeToken(n11);
    n13 = jj_consume_token(LPAREN);
             n12 = JTBToolkit.makeNodeToken(n13);
    n14 = Relation();
    n16 = jj_consume_token(RPAREN);
             n15 = JTBToolkit.makeNodeToken(n16);
     {if (true) return new ProjectionOp(n0,n2,n4,n5,n10,n12,n14,n15);}
    throw new Error("Missing return statement in function");
  }

  final public JoinOp JoinOp() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Condition n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   Relation n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   Relation n14;
   NodeToken n15;
   Token n16;
    n1 = jj_consume_token(JOIN);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LSQPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Condition();
    n6 = jj_consume_token(RSQPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(LPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
    n9 = Relation();
    n11 = jj_consume_token(RPAREN);
             n10 = JTBToolkit.makeNodeToken(n11);
    n13 = jj_consume_token(LPAREN);
             n12 = JTBToolkit.makeNodeToken(n13);
    n14 = Relation();
    n16 = jj_consume_token(RPAREN);
             n15 = JTBToolkit.makeNodeToken(n16);
     {if (true) return new JoinOp(n0,n2,n4,n5,n7,n9,n10,n12,n14,n15);}
    throw new Error("Missing return statement in function");
  }

  final public GroupingOp GroupingOp() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Attribute n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Attribute n9;
   NodeToken n10;
   Token n11;
   UDF n12;
   NodeOptional n13 = new NodeOptional();
   HavingClause n14;
    n1 = jj_consume_token(GRB);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LSQPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Attribute();
    label_3:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_3;
      }
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(45);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = Attribute();
        n6.addNode(n9);
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    n11 = jj_consume_token(RSQPAREN);
             n10 = JTBToolkit.makeNodeToken(n11);
    n12 = UDF();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HAVING:
      n14 = HavingClause();
        n13.addNode(n14);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
     {if (true) return new GroupingOp(n0,n2,n4,n5,n10,n12,n13);}
    throw new Error("Missing return statement in function");
  }

  final public HavingClause HavingClause() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Condition n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   Relation n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(HAVING);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LSQPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Condition();
    n6 = jj_consume_token(RSQPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(LPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
    n9 = Relation();
    n11 = jj_consume_token(RPAREN);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new HavingClause(n0,n2,n4,n5,n7,n9,n10);}
    throw new Error("Missing return statement in function");
  }

  final public SetOps SetOps() throws ParseException {
   Ops n0;
   NodeToken n1;
   Token n2;
   Relation n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Relation n8;
   NodeToken n9;
   Token n10;
    n0 = Ops();
    n2 = jj_consume_token(LPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Relation();
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(LPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Relation();
    n10 = jj_consume_token(RPAREN);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new SetOps(n0,n1,n3,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  final public ParOp ParOp() throws ParseException {
   NodeToken n0;
   Token n1;
   Operators n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Operators();
    n4 = jj_consume_token(RPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ParOp(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public Ops Ops() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTER:
      n2 = jj_consume_token(INTER);
                   n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case UNION:
      n4 = jj_consume_token(UNION);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case DIFF:
      n6 = jj_consume_token(DIFF);
                  n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Ops(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Relation Relation() throws ParseException {
   NodeChoice n0;
   AlphaNumIdent n1;
   Operators n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALPHA_NUM_IDENT:
      n1 = AlphaNumIdent();
        n0 = new NodeChoice(n1, 0);
      break;
    case SEL:
    case PROJ:
    case JOIN:
    case GRB:
    case INTER:
    case UNION:
    case DIFF:
    case LPAREN:
      n2 = Operators();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Relation(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Attribute Attribute() throws ParseException {
   AlphaNumIdent n0;
    n0 = AlphaNumIdent();
     {if (true) return new Attribute(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UDF UDF() throws ParseException {
   SimpleAggregations n0;
    n0 = SimpleAggregations();
     {if (true) return new UDF(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SimpleAggregations SimpleAggregations() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MIN:
      n2 = jj_consume_token(MIN);
                 n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case MAX:
      n4 = jj_consume_token(MAX);
                 n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case SUM:
      n6 = jj_consume_token(SUM);
                 n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case AVG:
      n8 = jj_consume_token(AVG);
                 n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case COUNT:
      n10 = jj_consume_token(COUNT);
                    n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SimpleAggregations(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Condition Condition() throws ParseException {
   Atom n0;
   NodeOptional n1 = new NodeOptional();
   ComplexCondition n2;
    n0 = Atom();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case OR:
      n2 = ComplexCondition();
        n1.addNode(n2);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
     {if (true) return new Condition(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ComplexCondition ComplexCondition() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   Atom n5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      n2 = jj_consume_token(OR);
                   n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case AND:
      n4 = jj_consume_token(AND);
                    n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n5 = Atom();
     {if (true) return new ComplexCondition(n0,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Atom Atom() throws ParseException {
   AtomPart n0;
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   AtomPart n12;
    n0 = AtomPart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      n3 = jj_consume_token(ASSIGN);
                  n2 = JTBToolkit.makeNodeToken(n3);
           n1 = new NodeChoice(n2, 0);
      break;
    case GT:
      n5 = jj_consume_token(GT);
                  n4 = JTBToolkit.makeNodeToken(n5);
           n1 = new NodeChoice(n4, 1);
      break;
    case LT:
      n7 = jj_consume_token(LT);
                  n6 = JTBToolkit.makeNodeToken(n7);
           n1 = new NodeChoice(n6, 2);
      break;
    case LTE:
      n9 = jj_consume_token(LTE);
                   n8 = JTBToolkit.makeNodeToken(n9);
           n1 = new NodeChoice(n8, 3);
      break;
    case GTE:
      n11 = jj_consume_token(GTE);
                    n10 = JTBToolkit.makeNodeToken(n11);
           n1 = new NodeChoice(n10, 4);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n12 = AtomPart();
     {if (true) return new Atom(n0,n1,n12);}
    throw new Error("Missing return statement in function");
  }

  final public AtomPart AtomPart() throws ParseException {
   NodeChoice n0;
   AtomAttr n1;
   IntegerLiteral n2;
   FloatLiteral n3;
   StringLiteral n4;
   NodeOptional n5 = new NodeOptional();
   ComplexAtomPart n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALPHA_NUM_IDENT:
      n1 = AtomAttr();
           n0 = new NodeChoice(n1, 0);
      break;
    case INTEGER_LITERAL:
      n2 = IntegerLiteral();
           n0 = new NodeChoice(n2, 1);
      break;
    case FLOATING_POINT_LITERAL:
      n3 = FloatLiteral();
           n0 = new NodeChoice(n3, 2);
      break;
    case STRING_LITERAL:
      n4 = StringLiteral();
           n0 = new NodeChoice(n4, 3);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      n6 = ComplexAtomPart();
        n5.addNode(n6);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
     {if (true) return new AtomPart(n0,n5);}
    throw new Error("Missing return statement in function");
  }

  final public ComplexAtomPart ComplexAtomPart() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   IntegerLiteral n6;
   FloatLiteral n7;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      n2 = jj_consume_token(PLUS);
                  n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case MINUS:
      n4 = jj_consume_token(MINUS);
                  n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n6 = IntegerLiteral();
           n5 = new NodeChoice(n6, 0);
      break;
    case FLOATING_POINT_LITERAL:
      n7 = FloatLiteral();
           n5 = new NodeChoice(n7, 1);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ComplexAtomPart(n0,n5);}
    throw new Error("Missing return statement in function");
  }

  final public AtomAttr AtomAttr() throws ParseException {
   AlphaNumIdent n0;
   NodeOptional n1 = new NodeOptional();
   AtRel n2;
    n0 = AlphaNumIdent();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      n2 = AtRel();
        n1.addNode(n2);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
     {if (true) return new AtomAttr(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public AtRel AtRel() throws ParseException {
   NodeToken n0;
   Token n1;
   AlphaNumIdent n2;
    n1 = jj_consume_token(46);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = AlphaNumIdent();
     {if (true) return new AtRel(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public AlphaNumIdent AlphaNumIdent() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(ALPHA_NUM_IDENT);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new AlphaNumIdent(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IntegerLiteral IntegerLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public FloatLiteral FloatLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FLOATING_POINT_LITERAL);
                                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new FloatLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StringLiteral StringLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STRING_LITERAL);
                         n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new StringLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(PROJ)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(JOIN)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(45)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(GRB)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(ALPHA_NUM_IDENT)) return true;
    return false;
  }

  private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(SEL)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(DIFF)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(45)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(INTER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public QueryParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x107780,0x7780,0x800,0x7000,0x107780,0xf8000,0x0,0x0,0x2f000000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x200,0x0,0x180,0x180,0x0,0x1e00,0x3,0x3,0xc00,0x4000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public QueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public QueryParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public QueryParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public QueryParser(QueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(QueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
