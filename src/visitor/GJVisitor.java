//
// Generated by JTB 1.3.2 DIT@UoA patched
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors must implement this interface.
 */

public interface GJVisitor<R,A> {

   //
   // GJ Auto class visitors
   //

   public R visit(NodeList n, A argu);
   public R visit(NodeListOptional n, A argu);
   public R visit(NodeOptional n, A argu);
   public R visit(NodeSequence n, A argu);
   public R visit(NodeToken n, A argu);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( Operators() ( Operators() )* )?
    */
   public R visit(Query n, A argu);

   /**
    * f0 -> SelectionOp()
    *       | ProjectionOp()
    *       | JoinOp()
    *       | GroupingOp()
    *       | SetOps()
    *       | ParOp()
    */
   public R visit(Operators n, A argu);

   /**
    * f0 -> "sel"
    * f1 -> "["
    * f2 -> Condition()
    * f3 -> "]"
    * f4 -> "("
    * f5 -> Relation()
    * f6 -> ")"
    */
   public R visit(SelectionOp n, A argu);

   /**
    * f0 -> "proj"
    * f1 -> "["
    * f2 -> Attribute()
    * f3 -> ( "," Attribute() )*
    * f4 -> "]"
    * f5 -> "("
    * f6 -> Relation()
    * f7 -> ")"
    */
   public R visit(ProjectionOp n, A argu);

   /**
    * f0 -> "join"
    * f1 -> "["
    * f2 -> Condition()
    * f3 -> "]"
    * f4 -> "("
    * f5 -> Relation()
    * f6 -> ")"
    * f7 -> "("
    * f8 -> Relation()
    * f9 -> ")"
    */
   public R visit(JoinOp n, A argu);

   /**
    * f0 -> "groupby"
    * f1 -> "["
    * f2 -> Attribute()
    * f3 -> ( "," Attribute() )*
    * f4 -> "]"
    * f5 -> UDF()
    * f6 -> ( HavingClause() )?
    * f7 -> "("
    * f8 -> Relation()
    * f9 -> ")"
    */
   public R visit(GroupingOp n, A argu);

   /**
    * f0 -> "having"
    * f1 -> "["
    * f2 -> Condition()
    * f3 -> "]"
    */
   public R visit(HavingClause n, A argu);

   /**
    * f0 -> Ops()
    * f1 -> "("
    * f2 -> Relation()
    * f3 -> ")"
    * f4 -> "("
    * f5 -> Relation()
    * f6 -> ")"
    */
   public R visit(SetOps n, A argu);

   /**
    * f0 -> "("
    * f1 -> Operators()
    * f2 -> ")"
    */
   public R visit(ParOp n, A argu);

   /**
    * f0 -> "inter"
    *       | "union"
    *       | "diff"
    */
   public R visit(Ops n, A argu);

   /**
    * f0 -> AlphaNumIdent()
    *       | Operators()
    */
   public R visit(Relation n, A argu);

   /**
    * f0 -> AlphaNumIdent()
    */
   public R visit(Attribute n, A argu);

   /**
    * f0 -> SimpleAggregations()
    */
   public R visit(UDF n, A argu);

   /**
    * f0 -> "min"
    *       | "max"
    *       | "sum"
    *       | "avg"
    *       | "count"
    */
   public R visit(SimpleAggregations n, A argu);

   /**
    * f0 -> Atom()
    * f1 -> ( ComplexCondition() )*
    */
   public R visit(Condition n, A argu);

   /**
    * f0 -> ( "or" | "and" )
    * f1 -> Atom()
    */
   public R visit(ComplexCondition n, A argu);

   /**
    * f0 -> AtomPart()
    * f1 -> ( "=" | ">" | "<" | "<=" | ">=" )
    * f2 -> AtomPart()
    */
   public R visit(Atom n, A argu);

   /**
    * f0 -> ( AtomAttr() | IntegerLiteral() | FloatLiteral() | StringLiteral() )
    * f1 -> ( ComplexAtomPart() )?
    */
   public R visit(AtomPart n, A argu);

   /**
    * f0 -> ( "+" | "-" )
    * f1 -> ( IntegerLiteral() | FloatLiteral() )
    */
   public R visit(ComplexAtomPart n, A argu);

   /**
    * f0 -> AlphaNumIdent()
    * f1 -> ( AtRel() )?
    */
   public R visit(AtomAttr n, A argu);

   /**
    * f0 -> "."
    * f1 -> AlphaNumIdent()
    */
   public R visit(AtRel n, A argu);

   /**
    * f0 -> <ALPHA_NUM_IDENT>
    */
   public R visit(AlphaNumIdent n, A argu);

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu);

   /**
    * f0 -> <FLOATING_POINT_LITERAL>
    */
   public R visit(FloatLiteral n, A argu);

   /**
    * f0 -> <STRING_LITERAL>
    */
   public R visit(StringLiteral n, A argu);

}
